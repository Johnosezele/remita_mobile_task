import 'dart:ui';
import 'package:flutter/material.dart';
import '../../core/app_export.dart';

String _appTheme = "primary";

/// Helper class for managing themes and colors.
class ThemeHelper {
  // A map of custom color themes supported by the app
  Map<String, PrimaryColors> _supportedCustomColor = {
    'primary': PrimaryColors()
  };

// A map of color schemes supported by the app
  Map<String, ColorScheme> _supportedColorScheme = {
    'primary': ColorSchemes.primaryColorScheme
  };

  /// Changes the app theme to [_newTheme].
  void changeTheme(String _newTheme) {
    _appTheme = _newTheme;
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors _getThemeColors() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedCustomColor.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    return _supportedCustomColor[_appTheme] ?? PrimaryColors();
  }

  /// Returns the current theme data.
  ThemeData _getThemeData() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedColorScheme.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    var colorScheme =
        _supportedColorScheme[_appTheme] ?? ColorSchemes.primaryColorScheme;
    return ThemeData(
      visualDensity: VisualDensity.standard,
      colorScheme: colorScheme,
      textTheme: TextThemes.textTheme(colorScheme),
      scaffoldBackgroundColor: appTheme.gray10002,
      outlinedButtonTheme: OutlinedButtonThemeData(
        style: OutlinedButton.styleFrom(
          backgroundColor: Colors.transparent,
          side: BorderSide(
            color: appTheme.blueGray300,
            width: 1.h,
          ),
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(22.h),
          ),
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
      elevatedButtonTheme: ElevatedButtonThemeData(
        style: ElevatedButton.styleFrom(
          backgroundColor: colorScheme.primary,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(22.h),
          ),
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
      checkboxTheme: CheckboxThemeData(
        fillColor: MaterialStateColor.resolveWith((states) {
          if (states.contains(MaterialState.selected)) {
            return colorScheme.primary;
          }
          return colorScheme.onSurface;
        }),
        side: BorderSide(
          width: 1,
        ),
        visualDensity: const VisualDensity(
          vertical: -4,
          horizontal: -4,
        ),
      ),
      dividerTheme: DividerThemeData(
        thickness: 1,
        space: 1,
        color: appTheme.deepOrange50001,
      ),
    );
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors themeColor() => _getThemeColors();

  /// Returns the current theme data.
  ThemeData themeData() => _getThemeData();
}

/// Class containing the supported text theme styles.
class TextThemes {
  static TextTheme textTheme(ColorScheme colorScheme) => TextTheme(
        bodyLarge: TextStyle(
          color: appTheme.black90002,
          fontSize: 16.fSize,
          fontFamily: 'Raleway',
          fontWeight: FontWeight.w400,
        ),
        bodyMedium: TextStyle(
          color: appTheme.black90002,
          fontSize: 13.fSize,
          fontFamily: 'Raleway',
          fontWeight: FontWeight.w400,
        ),
        bodySmall: TextStyle(
          color: appTheme.black90002,
          fontSize: 9.fSize,
          fontFamily: 'Inter',
          fontWeight: FontWeight.w400,
        ),
        headlineMedium: TextStyle(
          color: colorScheme.primary,
          fontSize: 28.fSize,
          fontFamily: 'Inter',
          fontWeight: FontWeight.w500,
        ),
        labelLarge: TextStyle(
          color: appTheme.red900,
          fontSize: 12.fSize,
          fontFamily: 'Raleway',
          fontWeight: FontWeight.w900,
        ),
        labelMedium: TextStyle(
          color: appTheme.black90002,
          fontSize: 11.fSize,
          fontFamily: 'Inter',
          fontWeight: FontWeight.w500,
        ),
        labelSmall: TextStyle(
          color: appTheme.black90002,
          fontSize: 9.fSize,
          fontFamily: 'Raleway',
          fontWeight: FontWeight.w500,
        ),
        titleMedium: TextStyle(
          color: appTheme.black90002,
          fontSize: 17.fSize,
          fontFamily: 'Raleway',
          fontWeight: FontWeight.w600,
        ),
        titleSmall: TextStyle(
          color: appTheme.whiteA700,
          fontSize: 14.fSize,
          fontFamily: 'Raleway',
          fontWeight: FontWeight.w500,
        ),
      );
}

/// Class containing the supported color schemes.
class ColorSchemes {
  static final primaryColorScheme = ColorScheme.light(
    // Primary colors
    primary: Color(0XFF1CA78B),
    primaryContainer: Color(0XFF262626),
    secondary: Color(0XFF262626),
    secondaryContainer: Color(0XFF8B8B8B),
    tertiary: Color(0XFF262626),
    tertiaryContainer: Color(0XFF8B8B8B),

    // Background colors
    background: Color(0XFF262626),

    // Surface colors
    surface: Color(0XFF262626),
    surfaceTint: Color(0XFF262626),
    surfaceVariant: Color(0XFF8B8B8B),

    // Error colors
    error: Color(0XFF262626),
    errorContainer: Color(0XFF8B8B8B),
    onError: Color(0XFFD9D9D9),
    onErrorContainer: Color(0XFF262626),

    // On colors(text colors)
    onBackground: Color(0XFFD9D9D9),
    onInverseSurface: Color(0XFFD9D9D9),
    onPrimary: Color(0XFF262626),
    onPrimaryContainer: Color(0XFFD9D9D9),
    onSecondary: Color(0XFFD9D9D9),
    onSecondaryContainer: Color(0XFF262626),
    onTertiary: Color(0XFFD9D9D9),
    onTertiaryContainer: Color(0XFF262626),

    // Other colors
    outline: Color(0XFF262626),
    outlineVariant: Color(0XFF262626),
    scrim: Color(0XFF262626),
    shadow: Color(0XFF262626),

    // Inverse colors
    inversePrimary: Color(0XFF262626),
    inverseSurface: Color(0XFF262626),

    // Pending colors
    onSurface: Color(0XFFD9D9D9),
    onSurfaceVariant: Color(0XFF262626),
  );
}

/// Class containing custom colors for a primary theme.
class PrimaryColors {
  // Black
  Color get black900 => Color(0XFF020202);
  Color get black90001 => Color(0XFF030303);
  Color get black90002 => Color(0XFF000000);

  // BlueGray
  Color get blueGray100 => Color(0XFFD7DDD0);
  Color get blueGray200 => Color(0XFFB5BDC9);
  Color get blueGray300 => Color(0XFF919AAC);
  Color get blueGray400 => Color(0XFF888888);
  Color get blueGray40014 => Color(0X148A959E);
  Color get blueGray50 => Color(0XFFEDF0F4);
  Color get blueGray5001 => Color(0XFFECEFF1);
  Color get blueGray5002 => Color(0XFFE9ECF1);
  Color get blueGray5099 => Color(0X99ECEEF1);
  Color get blueGray700 => Color(0XFF2D6B66);
  Color get blueGray900 => Color(0XFF313131);
  Color get blueGray90014 => Color(0X14323247);

  // DeepOrange
  Color get deepOrange500 => Color(0XFFF06521);
  Color get deepOrange50001 => Color(0XFFF16521);
  Color get deepOrange600 => Color(0XFFE4652E);

  // Gray
  Color get gray100 => Color(0XFFF2F5FA);
  Color get gray10001 => Color(0XFFF2F5FB);
  Color get gray10002 => Color(0XFFF3F6F8);
  Color get gray10003 => Color(0XFFF8F7F7);
  Color get gray10004 => Color(0XFFEEF5FB);
  Color get gray10005 => Color(0XFFF6F6F6);
  Color get gray200 => Color(0XFFEEEEEE);
  Color get gray20001 => Color(0XFFF0F0F0);
  Color get gray300 => Color(0XFFE4E4DD);
  Color get gray30001 => Color(0XFFDEDEDE);
  Color get gray400 => Color(0XFFC9CAC8);
  Color get gray40001 => Color(0XFFC4C4C4);
  Color get gray40002 => Color(0XFFBDBDBD);
  Color get gray40003 => Color(0XFFC8C8C8);
  Color get gray50 => Color(0XFFF9F9F9);
  Color get gray500 => Color(0XFF9B9D9C);
  Color get gray50001 => Color(0XFF979797);
  Color get gray50002 => Color(0XFFA4A4A4);
  Color get gray5001 => Color(0XFFFBFBFB);
  Color get gray5002 => Color(0XFFFAFCFD);
  Color get gray600 => Color(0XFF6A6E7A);
  Color get gray60001 => Color(0XFF707273);
  Color get gray60002 => Color(0XFF707070);
  Color get gray60003 => Color(0XFF747474);
  Color get gray700 => Color(0XFF646464);
  Color get gray70001 => Color(0XFF5A5F5E);
  Color get gray70002 => Color(0XFF595959);
  Color get gray800 => Color(0XFF373D3A);
  Color get gray80001 => Color(0XFF4F4F4F);
  Color get gray80002 => Color(0XFF4C4C4C);
  Color get gray900 => Color(0XFF19041D);
  Color get gray90001 => Color(0XFF1A051D);

  // Green
  Color get green900 => Color(0XFF324818);
  Color get greenA200 => Color(0XFF5DD7A0);

  // Indigo
  Color get indigo100 => Color(0XFFBECAD6);

  // LightGreen
  Color get lightGreen900 => Color(0XFF334816);
  Color get lightGreen90001 => Color(0XFF344A16);

  // Lime
  Color get lime900 => Color(0XFF9D7C13);

  // Orange
  Color get orange900 => Color(0XFFDD4F05);

  // Red
  Color get red500 => Color(0XFFF14336);
  Color get red800 => Color(0XFFC4183C);
  Color get red900 => Color(0XFFC41B1B);

  // Teal
  Color get teal100 => Color(0XFFBBE5DC);
  Color get teal600 => Color(0XFF178972);
  Color get tealA700 => Color(0XFF00C48C);

  // Tealf
  Color get teal3007f => Color(0X7F4AB8A2);

  // White
  Color get whiteA700 => Color(0XFFFFFFFF);
}

PrimaryColors get appTheme => ThemeHelper().themeColor();
ThemeData get theme => ThemeHelper().themeData();
